name: Workflow

on: 
  push:
    branches: 
      - feat

jobs:
  SAST:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0

    - name: Análisis con SonarCloud
      uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args:
            -Dsonar.projectKey="Laboratorio-Final-DevSecOps_Laboratorio-N-R"
            -Dsonar.organization="laboratorio-final-devsecops"
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
        projectBaseDir: .
    
    - name: Validate Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Validando el estado del Quality Gate..."
        analysisId=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

        qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
          "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

        if [ "$qualityGateStatus" != "OK" ]; then
          echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
          echo "Verificando vulnerabilidades críticas..."
          vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
            
          fi
        else
          echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."
        fi
      